# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote:
    build: ./vote
    # use python rather than gunicorn for local dev
    command: wait-for-it --strict --timeout=60 redis:6379 -- python app.py
    environment:
      REDIS_HOST: "redis"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
     - ./vote:/app
    ports:
      - "5000:80"
    networks:
      - front-tier
      - back-tier

  result:
    build: ./result
    # use nodemon rather than node for local dev
    command: wait-for-it --strict --timeout=60 db:5432 -- nodemon server.js
    environment:
      PGUSER: "postgres"
      PGHOST: "db"
      PGPASSWORD: "postgres"
      PGDATABASE: "postgres"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./result:/app
    ports:
      - "5001:80"
      - "5858:5858"
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker
    environment:
      PGHOST: "db"
      PGUSER: "postgres"
      PGPASSWORD: "postgres"
      REDIS_HOST: "redis"
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy 
    networks:
      - back-tier

  redis:
    image: redis:5.0-alpine3.10
    volumes:
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: "5s"
    ports: ["6379"]
    networks:
      - back-tier

  db:
    image: postgres:9.4
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier

  loadbalancer:
    build:
      context: ./loadbalancer
    networks:
      - front-tier

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
